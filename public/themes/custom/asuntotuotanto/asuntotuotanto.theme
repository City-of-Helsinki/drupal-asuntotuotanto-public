<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

use Drupal\Core\Url;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Helper function to get the icons path.
 *
 * @return string|null
 *   Returns path for the icons SVG or null.
 */
function asuntotuotanto_get_icons_path() {
  static $icon_path;
  if (!isset($icon_path)) {
    $theme_handler = \Drupal::service('theme_handler');
    $icon_path = '/' . $theme_handler->getTheme('asuntotuotanto')->getPath() . '/dist/icons/sprite.svg';

    // Add icons path as a global variable.
    if (!empty($icon_path)) {
      return $icon_path;
    }
  }
  return $icon_path;
}

/**
 * Implements hook_preprocess().
 */
function asuntotuotanto_preprocess(&$variables) {
  $variables['asuntotuotanto_icons_path'] = asuntotuotanto_get_icons_path();
  $variables['#attached']['drupalSettings']['asuntotuotanto_icons_path'] = $variables['asuntotuotanto_icons_path'];
}

/**
 * Implements hook_theme_suggestions_alter().
 *
 * {@inheritdoc}
 */
function asuntotuotanto_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if ($hook == 'form' & !empty($variables['element']['#id'])) {
    $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function asuntotuotanto_preprocess_menu(&$variables) {
  $menu_name = $variables['menu_name'];

  switch ($menu_name) {
    case 'main':
      $menu_block_configuration_suggestion = $variables['menu_block_configuration']['suggestion'];

      if ($menu_block_configuration_suggestion === 'main__mobile') {
        $login_link = [
          'title' => t('Log in'),
          'url' => Url::fromRoute('user.login'),
          'is_login_link' => TRUE,
        ];

        // Check if user is logged in.
        if (!\Drupal::currentUser()->isAuthenticated()) {
          $variables['items']['login_link'] = $login_link;
        }
      }

      if ($menu_block_configuration_suggestion === 'main__desktop') {
        $items = $variables['items'];
        $current_path =  Url::fromRoute('<current>')->toString();

        foreach ($items as $key => $item) {
          $is_active = FALSE;
          $is_below_item_active = FALSE;
          $below = $item['below'];
          $url = $item['url']->toString();

          if ($current_path === $url) {
            $is_active = TRUE;
          }

          if ($below) {
            foreach ($below as $below_item) {
              $below_url = $below_item['url']->toString();

              if ($current_path === $below_url) {
                $is_below_item_active = TRUE;
              }
            }

            if ($is_active || $is_below_item_active) {
              $variables['items'][$key]['attributes']->addClass('is-active');
            }
          }
        }
      }

      break;

    case 'user-tools-menu':
      $items = $variables['items']['asu_user_tools_menu.user_name']['below'];

      foreach ($items as $key => $item) {
        $url = $item['url']->toString();
        $current_path =  Url::fromRoute('<current>')->toString();
        $is_active = $current_path === $url;
        $variables['items']['asu_user_tools_menu.user_name']['below'][$key]['is_link_active'] = $is_active;
      }
      break;
  }
}

/**
 * Implements hook_preprocess_views_view().
 *
 * {@inheritdoc}
 */
function asuntotuotanto_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $view_id = $view->id();

  switch ($view_id) {
    case 'news':
      if ($more_link = $variables['more']) {
        $variables['more_link'] = ['url' => $more_link['#url'], 'title' => $more_link['#title']];
      }

      if ($view->getTitle()) {
        $variables['page_title'] = $view->getTitle();
      }

      break;
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function asuntotuotanto_theme_suggestions_container_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = 'container__' . $element['#name'];
    $suggestions[] = 'container__' . $element['#name'] . '__' . $element['#display_id'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }
}

/**
 * Implements hook_preprocess_node().
 */
function asuntotuotanto_preprocess_node(&$variables) {
  $node  = \Drupal\node\Entity\Node::load($variables['node']->id());

  if ($node->field_content && !empty($node->field_content->getValue())) {

    foreach ($node->field_content->getValue() as $value) {
      $paragraph = FALSE;

      if (!empty($value['entity'])) {
        $paragraph = $value['entity'];
      } elseif (!empty($value['target_id'])) {
        $paragraph = Paragraph::load($value['target_id']);
      }

      if (!empty($paragraph) && $paragraph instanceof Paragraph) {
        if ($paragraph->type->getValue()[0]["target_id"] === "text") {
          $text = strip_tags($paragraph->get('field_text')->value);
          $text = str_replace(array("\r", "\n"), ' ', $text);

          if (strlen($text) > 80) {
            $text = rtrim(substr($text, 0, 80)) . "...";
          }

          $variables['summary'] = $text;
          break;
        }
      }
    }
  }
}
